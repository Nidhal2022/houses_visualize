# -*- coding: utf-8 -*-
"""assignment_houses

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MuHqVrL97oYKN_wZXs8p0AYvT8_hCewz
"""

!pip install --upgrade protobuf

!pip install streamlit

import streamlit as st
import pandas as pd
import altair as alt
import matplotlib.pyplot as plt

houses=pd.read_csv('/content/houses.csv')
houses





houses=houses.dropna()

houses.boxplot('area')

houses=houses[houses['area']<400]

houses.boxplot('rent amount (R$)')

houses.describe()

houses=houses[houses['total (R$)']<8000]

houses

alt.data_transformers.enable('default', max_rows=None)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile home.py
# 
# import streamlit as st
# import pandas as pd
# import altair as alt
# import numpy as np
# import matplotlib.pyplot as plt
# import seaborn as sns
# 
# houses = pd.read_csv('/content/houses.csv')
# houses=houses.dropna()
# houses=houses[houses['area']<400]
# houses=houses[houses['total (R$)']<8000]
# 
# 
# st.title('houses Visualization 🏡')
# st.header(' Background of the Dataset ')
# 
# 
# 
# 
# 
# 
# 
# st.subheader(' These are :red[columns] of houses for rent in Brazil Dataset ')
# 
# import graphviz as graphviz
# graph = graphviz.Digraph()
# 
# for i in houses.columns[0:8]:
#   graph.edge('Houses data',i)
# 
# graph.edge('Houses data',houses.columns[12])
# for i in houses.columns[11:8:-1]:
#   graph.edge(houses.columns[12],i)
#   
# 
#   
# 
# st.graphviz_chart(graph)
# 
# def get_correlated(cor):
# 
#     correlated =set()
# 
#     for i in cor.columns:
# 
#         for j in cor.columns:
# 
#             if cor[i][j]>0.7 or cor[i][j]>-0.7 and i!=j:
# 
#                 correlated.add(i)
# 
#                 correlated.add(j)
# 
#     print("The Correlated columns: {}".format(list(correlated)))
# 
#     return correlated
# 
# st.subheader(' _correlation_ of columns 📊')
# 
# 
# def categorize(col):
# 
#     numerical,category=[],[]
# 
#     for i in col:
# 
#         if houses[i].dtype ==object:
# 
#             category.append(i)
# 
#         else:
# 
#             numerical.append(i)
# 
#     print("The numerical features {}:".format(numerical))
# 
#     print("The categorical features {}:".format(category))
# 
#     return category,numerical
# 
# 
# 
# category,numerical = categorize(houses.columns)
# 
# cor = houses.corr()
# 
# 
# 
# correlated = get_correlated(cor)
# 
# b = sns.pairplot(houses[correlated])
# 
# st.pyplot(b)
# 
# 
# import time
# @st.cache(suppress_st_warning=True)
# def chosen_sample(a, sam):
#     st.write("Cache : chosen_sample(", a, ",", sam, ") ")
#     time.sleep(2)  # This makes the function take 2s to run
#     return a * sam
# 
# a = 1
# sam = st.slider('How many sample of data do you want 📝?', 0, 100, 7)
# res = chosen_sample(a, sam)
# 
# st.write('sample of (', res,' )')
# 
# 
# st.table(houses.sample(sam))
# 
# 
# st.subheader('Findings')
# 
# st.write('''1)This is quite interesting the number of rooms does have a great impact in the rent. More rooms, the rent increases...
# 
# 2)Sao Paulo are mostly accepting pets and mostly all the other cities are also accepting the pets
# 
# 3)Mostly the house which allows pets are more costly compared to house that doesn't allows pet and there is some relationship between animal acceptance and total rent
# 
# 4)Non-Furnished homes are more costly and they are highly opted!!!
# Sao Paulo is the city with more non-furnitured houses ''')
#

!streamlit run home.py &>/dev/null&
!npx localtunnel --port 8501

# Commented out IPython magic to ensure Python compatibility.
# %%writefile pages/page.py
# import streamlit as st
# import pandas as pd
# import altair as alt
# import numpy as np
# import matplotlib.pyplot as plt
# 
# houses = pd.read_csv('/content/houses.csv')
# houses=houses.dropna()
# houses=houses[houses['area']<400]
# houses=houses[houses['total (R$)']<8000]
# st.title('houses Visualization')
# furn = st.selectbox("The house is : ",houses['furniture'].unique())
# st.write(furn)
# c = st.color_picker('Pick A Color', '#00f900')
# 
# plot_type=st.radio("select the plot type",['scatter','line','area'])
# if plot_type == 'scatter':
#   pl = alt.Chart(houses[houses['furniture']==furn]).mark_circle(color=c).encode(
#     x = 'rooms',
#     y ='bathroom',
#     tooltip = ['rooms','bathroom']
# ).interactive()
# else:
#   if plot_type == 'line':
#     pl = alt.Chart(houses[houses['furniture']==furn]).mark_bar(color=c).encode(
#       x = 'rooms',
#       y ='bathroom',
#       tooltip = ['rooms','bathroom']
#       
#     ).interactive()
#   else:
#      #pl=pd.DataFrame(houses[['rooms','bathroom']])
#      #st.area_chart(pl,use_container_width=True)
#      pl=alt.Chart(houses[houses['furniture']==furn]).mark_area(opacity=0.3,color=c).encode(
#      x="rooms:T",
#      y=alt.Y("bathroom:Q", stack=None)
#      
#      )
# 
# st.altair_chart(pl)
# 
# st.subheader('Pie cahrt shows the total cost with tax in each city')
# 
# 
# pll=alt.Chart(houses).mark_arc().encode(
#     theta=alt.Theta(field="total (R$)", type="quantitative"),
#     color=alt.Color(field="city", type="nominal"),
# )
# 
# st.altair_chart(pll)
# 
# 
# 
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile pages/page3.py
# import streamlit as st
# import pandas as pd
# import altair as alt
# import numpy as np
# import matplotlib.pyplot as plt
# 
# houses = pd.read_csv('/content/houses.csv')
# houses=houses.dropna()
# houses=houses[houses['area']<400]
# houses=houses[houses['total (R$)']<8000]
# st.title('houses Visualization')
# 
# chart1 = {
#     "mark": "point",
#     "encoding": {
#         "x": {
#             "field": "area",
#             "type": "quantitative",
#         },
#         "y": {
#             "field": "rent amount (R$)",
#             "type": "quantitative",
#         },
#         "color": {"field": "furniture", "type": "nominal"},
#         "shape": {"field": "furniture", "type": "nominal"},        
#     },
# }
# 
# chart2 = {
#     "mark": "point",
#     "encoding": {
#         "x": {
#             "field": "area",
#             "type": "quantitative",
#         },
#         "y": {
#             "field": "rent amount (R$)",
#             "type": "quantitative",
#         },
#         "color": {"field": "animal", "type": "nominal"},
#         "shape": {"field": "animal", "type": "nominal"},
#         "size": {"feild": "city", "type":"nominal"},
#     },
# }
# 
# chart3 = {
#     "mark": "point",
#     "encoding": {
#         "x": {
#             "field": "area",
#             "type": "quantitative",
#         },
#         "y": {
#             "field": "rent amount (R$)",
#             "type": "quantitative",
#         },
#         "color": {"field": "city", "type": "nominal"},
#         "shape": {"field": "city", "type": "nominal"},
#         "size": {"feild": "rooms", "type":"quantitative"},
# 
#     },
# }
# 
# need_help = st.expander("Need sompe specifications? 👉")
# with need_help:
#     st.markdown(
#         "the tabs will the show area of the houses and their relation with the cost ( rent amount ) of the houses / the data shown depending on furniture, animal, city"
#      )
# 
# tab1, tab2, tab3 = st.tabs(["furniture", "animal","city"])
# 
# with tab1:
#     # Use the Streamlit theme.
#     # This is the default. So you can also omit the theme argument.
#     st.vega_lite_chart(
#         houses, chart1, theme="streamlit", use_container_width=True
#     )
# with tab2:
#     st.vega_lite_chart(
#         houses, chart2, theme=None, use_container_width=True
#     )
# with tab3:
#     st.vega_lite_chart(
#         houses, chart3, theme="streamlit", use_container_width=True
#     )
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile pages/page2.py
# from datetime import datetime
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# import plotly.graph_objects as go
# import seaborn as sns
# 
# 
# houses = pd.read_csv('/content/houses.csv')
# st.title('houses Visualization')
# 
# def plot():
# 
# 
#     
#     houses=pd.read_csv('/content/houses.csv')
# 
#     clist = houses["city"].unique().tolist()
#     countries = st.multiselect("Select country", clist)
#     st.header("You selected: {}".format(", ".join(countries)))
# 
#     dfs = {country: houses[houses["city"] == country] for country in countries}
#     
#     fig = go.Figure()
#     for country, houses in dfs.items():
#         fig = fig.add_trace(go.Bar(x=houses["rooms"], y=houses["rent amount (R$)"], name=country))
# 
#     st.plotly_chart(fig)
# 
#     ax = sns.regplot(houses['fire insurance (R$)'],houses['rent amount (R$)']).get_figure()
# 
#     st.pyplot(ax)
# 
# 
# plot()
# 
# 
# 
#



"""st.checkbox('yes')
st.button('Click')
st.radio('Pick your gender',['Male','Female'])
st.selectbox('Pick your gender',['Male','Female'])
st.multiselect('choose a planet',['Jupiter', 'Mars', 'neptune'])
st.select_slider('Pick a mark', ['Bad', 'Good', 'Excellent'])
st.slider('Pick a number', 0,50)


st.success("You did it !")
st.error("Error")
st.warnig("Warning")
st.info("It's easy to build a streamlit app")
st.exception(RuntimeError("RuntimeError exception"))

"""











